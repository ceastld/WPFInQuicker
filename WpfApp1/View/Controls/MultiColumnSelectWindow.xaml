<Window
    x:Class="WpfApp1.View.Controls.MultiColumnSelectWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dd="urn:gong-wpf-dragdrop"
    xmlns:entities="clr-namespace:Quicker.Public.Entities;assembly=Quicker.Public"
    xmlns:fa="clr-namespace:FontAwesome5.WPF;assembly=FontAwesomeIconsWpf"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:local="clr-namespace:WpfApp1.View.Controls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:qk="https://getquicker.net"
    Title="MultiColumnSelectWindow"
    MinWidth="100"
    MinHeight="100"
    MaxWidth="{Binding [window][maxWidth], Mode=TwoWay}"
    MaxHeight="{Binding [window][maxHeight], Mode=TwoWay}"
    hc:WindowAttach.IsDragElement="True"
    AllowsTransparency="True"
    Background="#02FFFFFF"
    BorderThickness="0"
    Left="{Binding [windowState][left], Mode=TwoWay}"
    ResizeMode="CanResize"
    SizeToContent="WidthAndHeight"
    Top="{Binding [windowState][top], Mode=TwoWay}"
    Topmost="True"
    WindowStyle="None"
    mc:Ignorable="d">
    <Window.Resources>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Width" Value="16" />
            <Setter Property="Height" Value="16" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="1.5" Background="Transparent">
                            <fa:SvgAwesome Name="ExpandIcon" Icon="Light_CaretDown" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="ExpandIcon" Property="Icon" Value="Solid_CaretRight" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style
            x:Key="TreeViewItemBaseStyle"
            BasedOn="{StaticResource BaseStyle}"
            TargetType="{x:Type TreeViewItem}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="IsExpanded" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="36" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Border
                                Name="Bd"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="true">
                                <DockPanel Margin="{Binding Converter={StaticResource TreeViewItemMarginConverter}, RelativeSource={RelativeSource TemplatedParent}}" LastChildFill="True">
                                    <ToggleButton
                                        Name="Expander"
                                        ClickMode="Press"
                                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{StaticResource ExpandCollapseToggleStyle}" />
                                    <ContentPresenter
                                        Name="PART_Header"
                                        VerticalAlignment="Center"
                                        ContentSource="Header"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </DockPanel>
                            </Border>
                            <ItemsPresenter Name="ItemsHost" Grid.Row="1" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="Bd" Property="IsMouseOver" Value="true">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                            </Trigger>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource PrimaryBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                    <Condition Property="IsSelectionActive" Value="false" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="PrimaryBrush" Color="#7FFFA6A6" />
        <SolidColorBrush x:Key="TextIconBrush" Color="Black" />
    </Window.Resources>
    <Grid Margin="20">
        <Border
            Grid.RowSpan="2"
            Background="White"
            CornerRadius="5">
            <Border.Effect>
                <DropShadowEffect
                    BlurRadius="10"
                    Opacity="0.5"
                    ShadowDepth="0" />
            </Border.Effect>
        </Border>
        <TreeView
            x:Name="TheTreeView"
            Margin="10"
            dd:DragDrop.IsDragSource="True"
            dd:DragDrop.IsDropTarget="True"
            BorderThickness="0"
            ItemsSource="{Binding [itemList]}">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate DataType="{x:Type entities:CommonOperationItem}" ItemsSource="{Binding Children}">
                    <Button
                        Name="TheButton"
                        Margin="2"
                        Padding="0"
                        HorizontalAlignment="Stretch"
                        qk:Att.Action="{Binding Data}"
                        DataContext="{Binding}"
                        ToolTip="{Binding Description}">
                        <Button.Content>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <qk:IconControl
                                    Height="16"
                                    Margin="2,0"
                                    Icon="{Binding Icon}"
                                    Visibility="{Binding Icon, Converter={StaticResource String2VisibilityConverter}}" />
                                <Label
                                    Name="TheLabel"
                                    Grid.Column="1"
                                    MaxWidth="100"
                                    Margin="2,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    Content="{Binding Title}"
                                    FontSize="13"
                                    Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=Foreground}"
                                    Visibility="{Binding Title, Converter={StaticResource String2VisibilityConverter}}" />
                            </Grid>
                        </Button.Content>
                        <Button.Style>
                            <Style BasedOn="{StaticResource ButtonDefault}" TargetType="{x:Type Button}">
                                <Setter Property="Foreground" Value="Black" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Data}" Value="close:Ok">
                                        <Setter Property="Foreground" Value="White" />
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
            <TreeView.ItemContainerStyle>
                <Style BasedOn="{StaticResource TreeViewItemBaseStyle}" TargetType="{x:Type TreeViewItem}">
                    <Setter Property="hc:BorderElement.CornerRadius" Value="4" />
                </Style>
            </TreeView.ItemContainerStyle>
            <TreeView.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </TreeView.ItemsPanel>
            <TreeView.Items>
                <entities:CommonOperationItem Title="aaaa" Children="{StaticResource ListBoxTestItems}" />
                <entities:CommonOperationItem Title="aaaa" />
                <entities:CommonOperationItem Title="aaaa" />
                <entities:CommonOperationItem Title="aaaa" />
                <entities:CommonOperationItem Title="aaaa" />
                <entities:CommonOperationItem Title="aaaa" />
            </TreeView.Items>
        </TreeView>
        <Button
            Width="20"
            Height="20"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            qk:Att.Action="close:"
            Background="Transparent">
            <Button.Style>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Content" Value="" />
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Content">
                                <Setter.Value>
                                    <fa:SvgAwesome Icon="Light_Times" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
    </Grid>
</Window>
