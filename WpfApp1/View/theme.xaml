<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dd="urn:gong-wpf-dragdrop"
    xmlns:entities="clr-namespace:Quicker.Public.Entities;assembly=Quicker.Public"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:mdx="clr-namespace:MdXaml;assembly=MdXaml"
    xmlns:qk="https://getquicker.net"
    xmlns:qk_controls="clr-namespace:Quicker.View.Controls;assembly=Quicker"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:ui="clr-namespace:Quicker.Utilities.UI;assembly=Quicker"
    xmlns:view="clr-namespace:Quicker.View;assembly=Quicker">
    <ui:AdjustDoubleConverter x:Key="AdjustDoubleConverter" />
    <Style x:Key="EmptyListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="HorListBoxTemplate" TargetType="{x:Type ListBox}">
        <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
            <WrapPanel
                IsItemsHost="True"
                Orientation="Horizontal"
                ScrollViewer.CanContentScroll="True" />
        </ScrollViewer>
    </ControlTemplate>
    <ControlTemplate x:Key="VerListBoxTemplate" TargetType="{x:Type ListBox}">
        <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
            <WrapPanel
                IsItemsHost="True"
                Orientation="Vertical"
                ScrollViewer.CanContentScroll="True" />
        </ScrollViewer>
    </ControlTemplate>
    <SolidColorBrush x:Key="ButtonMouseOverBrush" Color="#7FC9F3FF" />
    <!--  这里是常用的datatemplate  -->
    <system:Double x:Key="SmallIconSize">10</system:Double>
    <system:Double x:Key="BigIconSize">32</system:Double>
    <system:Double x:Key="BigButtonSize">50</system:Double>
    <DataTemplate x:Key="SmallIconDataTemplate" DataType="{x:Type entities:CommonOperationItem}">
        <Grid>
            <Button
                Name="TheButton"
                Margin="5"
                Padding="10,0"
                HorizontalAlignment="Left"
                qk:Att.Action="{Binding Data}"
                DataContext="{Binding}"
                ToolTip="{Binding Description}">
                <Button.Content>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <qk:IconControl
                            Height="16"
                            Margin="2,0"
                            Icon="{Binding Icon}"
                            Visibility="{Binding Icon, Converter={StaticResource String2VisibilityConverter}}" />
                        <Label
                            Name="TheLabel"
                            Grid.Column="1"
                            Margin="2,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="Transparent"
                            BorderThickness="0"
                            Content="{Binding Title}"
                            FontSize="13"
                            Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=Foreground}"
                            Visibility="{Binding Title, Converter={StaticResource String2VisibilityConverter}}" />
                    </Grid>
                </Button.Content>
                <Button.Style>
                    <Style BasedOn="{StaticResource ButtonDefault}" TargetType="{x:Type Button}">
                        <Setter Property="Foreground" Value="Black" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Data}" Value="close:Ok">
                                <Setter Property="Foreground" Value="White" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>
    </DataTemplate>
    <!--  还在写,后面有用  -->
    <Style x:Key="BigIconButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="TheGrid">
                        <Border Background="{TemplateBinding Background}" CornerRadius="3" />
                        <ContentPresenter
                            Name="TheContent"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseCaptured" Value="True">
                            <Setter TargetName="TheContent" Property="RenderTransformOrigin" Value="0.5 0.5" />
                            <Setter TargetName="TheContent" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseOverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="BigIconDataTemplate" DataType="{x:Type entities:CommonOperationItem}">
        <Button
            Width="{DynamicResource BigButtonSize}"
            Height="{DynamicResource BigButtonSize}"
            qk:Att.Action="{Binding Data}"
            Style="{StaticResource BigIconButtonStyle}">
            <Grid Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>
                <qk:IconControl Icon="{Binding Icon}" Visibility="{Binding Icon, Converter={StaticResource String2VisibilityConverter}}" />
                <TextBlock
                    Name="TheLabel"
                    Grid.Row="1"
                    Padding="3"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="Transparent"
                    FontSize="13"
                    Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=Foreground}"
                    Text="{Binding Title}"
                    TextTrimming="CharacterEllipsis" />
            </Grid>
        </Button>
    </DataTemplate>
    <DataTemplate x:Key="OnlyIconDataTemplate" DataType="{x:Type entities:CommonOperationItem}">
        <Button MaxWidth="70">
            <Grid>
                <qk:IconControl
                    Width="{DynamicResource SmallIconSize}"
                    Height="{DynamicResource SmallIconSize}"
                    Icon="{Binding Icon}" />
                <Label
                    Name="TheLabel"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Background="Transparent"
                    BorderThickness="0"
                    Content="{Binding Title}"
                    FontSize="13"
                    Visibility="{Binding Icon, Converter={StaticResource String2VisibilityReConverter}}" />
            </Grid>
        </Button>
    </DataTemplate>
    <!--  for listbox  -->
    <x:Array x:Key="ListBoxTestItems" Type="{x:Type entities:CommonOperationItem}">
        <entities:CommonOperationItem
            Title="确认"
            Data="close:OK"
            Description="关闭窗口并返回Ok"
            Icon="fa:Light_Times" />
        <entities:CommonOperationItem
            Title="取消"
            Data="close:Cancel"
            Description="关闭窗口并返回Cancel" />
        <entities:CommonOperationItem
            Title="测试"
            Data="close:测试"
            Icon="fa:Light_Times" />
    </x:Array>
    <Style x:Key="ButtonListBoxStyle" TargetType="ListBox">
        <Setter Property="ItemContainerStyle" Value="{StaticResource EmptyListBoxItemStyle}" />
        <Setter Property="ItemTemplate" Value="{StaticResource SmallIconDataTemplate}" />
        <Setter Property="Template" Value="{StaticResource HorListBoxTemplate}" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Items.Count}" Value="0">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="WindowContentBorder" TargetType="Border">
        <Setter Property="Background" Value="White" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="10"
                    Opacity="0.5"
                    ShadowDepth="0" />
            </Setter.Value>
        </Setter>
    </Style>
    <!--#region 一些可用的动态资源-->
    <SolidColorBrush x:Key="ParagraphBrush" Color="Black" />
    <SolidColorBrush x:Key="HeaderBrush" Color="Black" />
    <SolidColorBrush x:Key="HyperlinkBrush" Color="#0056C9" />
    <SolidColorBrush x:Key="HyperlinkMouseOverBrush" Color="#FFFF4F4F" />
    <!--#endregion-->

    <!--  鼠标悬浮就变成hand的按钮  -->
    <Style
        x:Key="MouseOverHandButtonStyle"
        BasedOn="{StaticResource ButtonDefault}"
        TargetType="Button">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Content" Value="复制" />
        <Setter Property="Margin" Value="3" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MdStyle" TargetType="{x:Type FlowDocument}">
        <!--  字体,大小相关样式  -->
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="FontFamily" Value="{x:Static SystemFonts.MessageFontFamily}" />
        <Setter Property="PagePadding" Value="10" />
        <Style.Resources>
            <!--  引用块,左边一条竖线的那个  -->
            <Style TargetType="{x:Type Section}">
                <Setter Property="Margin" Value="0,10" />
                <Setter Property="Padding" Value="10,0" />
                <Setter Property="BorderBrush" Value="#DEDEDE" />
                <Setter Property="BorderThickness" Value="2.5,0,0,0" />
            </Style>
            <!--  代码块样式  -->
            <Style xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit" TargetType="{x:Type avalonEdit:TextEditor}">
                <Setter Property="avalonEdit:TextEditor.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="avalonEdit:TextEditor.VerticalScrollBarVisibility" Value="Auto" />
                <!--<Setter Property="FrameworkElement.Margin" Value="2,0,2,0" />-->
                <Setter Property="Background" Value="#FFF6F5F5" />
                <Setter Property="Padding" Value="5,10" />
                <!--<Setter Property="BorderBrush" Value="Black" />-->
                <Setter Property="Border.CornerRadius" Value="5" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type avalonEdit:TextEditor}">
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding Border.CornerRadius}">
                                <Grid>
                                    <ScrollViewer
                                        Name="PART_ScrollViewer"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalContentAlignment="Left"
                                        VerticalContentAlignment="Top"
                                        CanContentScroll="True"
                                        Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextArea}"
                                        Focusable="False"
                                        HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                        VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" />
                                    <Button
                                        Name="CopyButton"
                                        qk:Att.Action="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Text, StringFormat='operation=copy&amp;data={0}'}"
                                        Style="{StaticResource MouseOverHandButtonStyle}"
                                        Visibility="Collapsed" />
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="WordWrap" Value="True">
                                    <Setter TargetName="PART_ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="CopyButton" Property="Visibility" Value="Visible" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--  1,2,3,4 级标题,段落,代码块  -->
            <Style TargetType="{x:Type Paragraph}">
                <!--  所有段落的边距属性,可用于调整文档的紧凑程度  -->
                <Setter Property="Margin" Value="0,6" />
                <Setter Property="Foreground" Value="{DynamicResource ParagraphBrush}" />
                <Style.Triggers>
                    <!--  标题  -->
                    <Trigger Property="FrameworkContentElement.Tag" Value="Heading1">
                        <Setter Property="Block.Margin" Value="0,10,0,0" />
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource HeaderBrush}" />
                        <Setter Property="TextElement.FontSize" Value="28" />
                        <Setter Property="TextElement.FontWeight" Value="Light" />
                        <!--  一级标题剧中  -->
                        <Setter Property="TextAlignment" Value="Center" />
                    </Trigger>
                    <Trigger Property="FrameworkContentElement.Tag" Value="Heading2">
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource HeaderBrush}" />
                        <Setter Property="TextElement.FontSize" Value="21" />
                        <!--<Setter Property="TextElement.FontWeight" Value="Bold" />-->
                    </Trigger>
                    <Trigger Property="FrameworkContentElement.Tag" Value="Heading3">
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource HeaderBrush}" />
                        <Setter Property="TextElement.FontSize" Value="17.5" />
                        <!--<Setter Property="TextElement.FontWeight" Value="Bold" />-->
                    </Trigger>
                    <Trigger Property="FrameworkContentElement.Tag" Value="Heading4">
                        <Setter Property="Block.Margin" Value="0,5,5,0" />
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource HeaderBrush}" />
                        <Setter Property="TextElement.FontSize" Value="14" />
                        <!--<Setter Property="TextElement.FontWeight" Value="Heavy" />-->
                    </Trigger>
                    <!--  代码块,没用  -->
                    <Trigger Property="FrameworkContentElement.Tag" Value="CodeBlock">
                        <Setter Property="TextElement.FontFamily" Value="Courier New" />
                        <Setter Property="TextElement.FontSize" Value="20" />
                        <Setter Property="TextElement.Background" Value="#12181F25" />
                        <Setter Property="Block.Padding" Value="20,10" />
                    </Trigger>
                    <Trigger Property="FrameworkContentElement.Tag" Value="Note">
                        <Setter Property="Margin" Value="5,0,5,0" />
                        <Setter Property="Padding" Value="10,5" />
                        <Setter Property="BorderBrush" Value="#DEDEDE" />
                        <Setter Property="BorderThickness" Value="3,3,3,3" />
                        <Setter Property="TextElement.Background" Value="#FAFAFA" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--  普通文本  -->
            <Style TargetType="{x:Type Run}">
                <Style.Triggers>
                    <Trigger Property="FrameworkContentElement.Tag" Value="CodeSpan">
                        <Setter Property="TextElement.FontFamily" Value="Courier New" />
                        <Setter Property="TextElement.FontSize" Value="11.9" />
                        <Setter Property="TextElement.Background" Value="#12181F25" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--  超链接  -->
            <Style TargetType="{x:Type Hyperlink}">
                <Setter Property="Inline.TextDecorations" Value="None" />
                <Setter Property="Foreground" Value="{DynamicResource HyperlinkBrush}" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource HyperlinkMouseOverBrush}" />
                    </Trigger>
                    <Trigger Property="IsMouseCaptured" Value="True">
                        <Setter Property="Foreground" Value="Gray" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--  图片  -->
            <Style TargetType="{x:Type Image}">
                <!--<Setter Property="MaxWidth" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=mdx:MarkdownScrollViewer}, Converter={StaticResource AdjustDoubleConverter}, ConverterParameter=-20}" />-->
                <Setter Property="MaxWidth" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=mdx:MarkdownScrollViewer}, Converter={StaticResource AdjustDoubleConverter}, ConverterParameter=-20}" />
                <Style.Triggers>
                    <Trigger Property="FrameworkElement.Tag" Value="imageright">
                        <Setter Property="HorizontalAlignment" Value="Right" />
                    </Trigger>
                    <Trigger Property="Tag" Value="imageleft">
                        <Setter Property="HorizontalAlignment" Value="Left" />
                    </Trigger>
                    <Trigger Property="Tag" Value="imagecenter">
                        <Setter Property="HorizontalAlignment" Value="Center" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--  列表  -->
            <Style TargetType="{x:Type List}">
                <Setter Property="Margin" Value="0,5" />
                <!--  markerOffset, 没试出效果, 后面再搞了  -->
                <!--<Setter Property="MarkerOffset" Value="20"></Setter>-->
            </Style>
            <!--  表格  -->
            <Style TargetType="{x:Type Table}">
                <Setter Property="Table.CellSpacing" Value="0" />
                <Setter Property="Block.BorderThickness" Value="0.3" />
                <Setter Property="Background" Value="White" />
                <!--<Setter Property="BorderThickness" Value="10"></Setter>-->
                <Setter Property="BorderBrush" Value="Gray" />
                <Style.Resources>
                    <Style TargetType="{x:Type TableCell}">
                        <Setter Property="TableCell.BorderThickness" Value="0.2" />
                        <Setter Property="TableCell.BorderBrush" Value="Gray" />
                        <Setter Property="TableCell.Padding" Value="13,6" />
                    </Style>
                </Style.Resources>
            </Style>
            <!--  表头样式  -->
            <Style TargetType="{x:Type TableRowGroup}">
                <Style.Triggers>
                    <Trigger Property="FrameworkContentElement.Tag" Value="TableHeader">
                        <Setter Property="TextElement.FontWeight" Value="DemiBold" />
                        <Setter Property="TextElement.FontWeight" Value="Bold" />
                        <Setter Property="TextElement.Background" Value="#FFF8F8F8" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--  去除表头后,双数行的样式  -->
            <Style TargetType="{x:Type TableRow}">
                <Style.Triggers>
                    <Trigger Property="FrameworkContentElement.Tag" Value="EvenTableRow">
                        <Setter Property="TextElement.Background" Value="#FFF8F8F8" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--  表格列样式  -->
            <Style TargetType="{x:Type TableColumn}" />
            <!--  加粗,斜体,下划线  -->
            <Style TargetType="{x:Type BlockUIContainer}">
                <Style.Triggers>
                    <Trigger Property="FrameworkContentElement.Tag" Value="RuleSingle">
                        <Setter Property="Block.Margin" Value="0,3" />
                    </Trigger>
                    <Trigger Property="FrameworkContentElement.Tag" Value="RuleDouble">
                        <Setter Property="Block.Margin" Value="0,3" />
                    </Trigger>
                    <Trigger Property="FrameworkContentElement.Tag" Value="RuleBold">
                        <Setter Property="Block.Margin" Value="0,3" />
                    </Trigger>
                    <Trigger Property="FrameworkContentElement.Tag" Value="RuleBoldWithSingle">
                        <Setter Property="Block.Margin" Value="0,3" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--  分割线  -->
            <Style TargetType="{x:Type Separator}">
                <Setter Property="Height" Value="0.5" />
                <Setter Property="Background" Value="#A8A8A8" />
            </Style>
        </Style.Resources>
    </Style>
</ResourceDictionary>